{"paragraphs":[{"text":"%md\n## Partie 2 : Exploration des donnees GDELT via Spark et Chagement en base","user":"anonymous","dateUpdated":"2021-01-22T14:36:14+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Partie 2 : Exploration des donnees GDELT via Spark et Chagement en base</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1611325555345_1388882726","id":"20210122-142555_458090327","dateCreated":"2021-01-22T14:25:55+0000","dateStarted":"2021-01-22T14:36:14+0000","dateFinished":"2021-01-22T14:36:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3116"},{"text":"// imports\n\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n\nimport com.mongodb.spark.config._\nimport com.mongodb.spark._\nimport com.mongodb.spark.config.ReadConfig\nimport com.mongodb.spark.sql._\n","user":"anonymous","dateUpdated":"2021-01-22T14:12:06+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport com.mongodb.spark.config._\nimport com.mongodb.spark._\nimport com.mongodb.spark.config.ReadConfig\nimport com.mongodb.spark.sql._\n"}]},"apps":[],"jobName":"paragraph_1611324462617_-1424355558","id":"20210117-182539_1040165748","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3117"},{"text":"%md\nChargement des données","user":"anonymous","dateUpdated":"2021-01-22T14:26:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Chargement des données</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1611325589885_-1353007787","id":"20210122-142629_1934374430","dateCreated":"2021-01-22T14:26:29+0000","dateStarted":"2021-01-22T14:26:38+0000","dateFinished":"2021-01-22T14:26:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3118"},{"text":"import com.amazonaws.auth.BasicAWSCredentials\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicSessionCredentials\n\n\nval AWS_ID = \"XXX\"\nval AWS_KEY = \"XXX\"\nval AWS_SESSION_KEY = \"XXX\"\n\n\n// la classe AmazonS3Client n'est pas serializable\n// on rajoute l'annotation @transient pour dire a Spark de ne pas essayer de serialiser cette classe et l'envoyer aux executeurs\n@transient val awsClient = new AmazonS3Client(new BasicSessionCredentials(AWS_ID, AWS_KEY, AWS_SESSION_KEY))\n\nsc.hadoopConfiguration.set(\"fs.s3.access.key\", AWS_ID) \nsc.hadoopConfiguration.set(\"fs.s3.secret.key\", AWS_KEY) \nsc.hadoopConfiguration.set(\"fs.s3.session.token\", AWS_SESSION_KEY)\nsc.hadoopConfiguration.set(\"fs.s3.connection.maximum\",\"50000\")","user":"anonymous","dateUpdated":"2021-01-22T14:11:52+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\nimport com.amazonaws.auth.BasicAWSCredentials\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicSessionCredentials\nAWS_ID: String = ASIAQAKR6PIQECP33ITW\nAWS_KEY: String = 79p7NG665iZK6xf2tpk9cexEWuqx39+xk/CfSzbs\nAWS_SESSION_KEY: String = FwoGZXIvYXdzEMX//////////wEaDFbotkTGVHVCPPvjSSLMAbnLYqBuFkBJIfS2erF4JyJ63j4Q3cZijISmZEfysi+hUYlL2NawOxXvPy+z9khjBrhA80bMEfaIgAFHmF+8QUwn4NPZgb63nq1MFqtLD0iWQ8RMDODfCv/1ofDBYiImKmtizNhphCZPZupqsbO3kYQTR9uCt+RDbRCGz2cTo/zmsDFZbtgjyNbqJoHxT7IofZgH0RC++cHak48tfy9nSbBwBEwsAwcfdisDCFRHKFC+dpTf2ROyk2nAnkq9swYiHrtp+KHI1xgAu4PtsyjrpqCABjIuiMw4kgP2hwttMd5GC4QY+1fNdopUL2jdCgUSDF1nuTjW75tf2KOrjkeAIJRkfg==\nawsClient: com.amazonaws.services.s3.AmazonS3Client = com.amazonaws.services.s3.AmazonS3Client@4fb77a87\n"}]},"apps":[],"jobName":"paragraph_1611324462618_-1182171813","id":"20210118-232707_1203690359","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3119"},{"text":"// Pour changer l'url vers le budket et la periode etudiée\nval bucket = \"s3://gdelt-adrien-senet-telecom-2020-2/2020-12/\"\nval date_range = \"202012\"\n\n\n// RDDs anglais\nval eventsRDD = sc.binaryFiles(bucket + date_range +\"[0-9]*.export.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile(_ != null).\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval gkgRDD = sc.binaryFiles(bucket + date_range +\"[0-9]*.gkg.csv.zip\"). \n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile(_ != null).\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n                \n   }        \n\nval mentionsRDD = sc.binaryFiles(bucket + date_range +\"[0-9]*.mentions.CSV.zip\"). \n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile(_ != null).\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n   }\n\n\n// Creation des RDD pour les fichiers Translingual\nval eventsRDD_trans = sc.binaryFiles(bucket + date_range +\"[0-9]*.translation.export.CSV.zip\").\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile(_ != null).\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval gkgRDD_trans = sc.binaryFiles(bucket + date_range +\"[0-9]*.translation.gkg.csv.zip\"). \n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile(_ != null).\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n                \n   }        \n\nval mentionsRDD_trans = sc.binaryFiles(bucket + date_range +\"[0-9]*.translation.mentions.CSV.zip\"). \n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile(_ != null).\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n   }\n    ","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"bucket: String = s3://gdelt-adrien-senet-telecom-2020-2/2020-12/\ndate_range: String = 202012\neventsRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[193] at flatMap at <console>:52\ngkgRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[195] at flatMap at <console>:64\nmentionsRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[197] at flatMap at <console>:77\neventsRDD_trans: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[199] at flatMap at <console>:91\ngkgRDD_trans: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[201] at flatMap at <console>:103\nmentionsRDD_trans: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[203] at flatMap at <console>:116\n"}]},"apps":[],"jobName":"paragraph_1611324462618_1654510586","id":"20210117-182520_1804345525","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3120"},{"text":"// test pour gerer les fichiers corrompus (ne fonctionne pas car fichiers zippés)\n// val df_events = spark.read\n//           .option(\"header\", \"false\")\n//           .option(\"mode\", \"DROPMALFORMED\")\n//           .csv(bucket + date_range +\"[0-9]*.export.CSV.zip\")\n//\n// En pratique on a eliminé les doublon en effectuant des essais par dicotomie en reduisant la période au fur a mésure","user":"anonymous","dateUpdated":"2021-01-22T14:34:28+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [_c0: string, _c1: string]\n"}]},"apps":[],"jobName":"paragraph_1611324462619_1841170756","id":"20210119-211824_680094436","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3121"},{"text":"%md\n### Q1 : afficher le nombre d’articles/évènements qui parlent de COVID qu’il y a eu pour chaque triplet: (jour, pays de l’évènement, langue de l’article)","user":"anonymous","dateUpdated":"2021-01-22T14:33:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Q1 : afficher le nombre d’articles/évènements qui parlent de COVID qu’il y a eu pour chaque triplet: (jour, pays de l’évènement, langue de l’article)</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1611325624590_-1561554409","id":"20210122-142704_481899363","dateCreated":"2021-01-22T14:27:04+0000","dateStarted":"2021-01-22T14:33:24+0000","dateFinished":"2021-01-22T14:33:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3122"},{"text":"// Q1\n\n// dataframes english\nval events_map_DF = eventsRDD.map(x => x.split(\"\\t\")).toDF()\nval events_DF = events_map_DF.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GLOBALEVENTID\").cast(\"Integer\"),\n    col(\"col\").getItem(1).as(\"SQLDATE\").cast(\"Integer\"),\n    col(\"col\").getItem(33).as(\"NumArticles\").cast(\"Integer\"),\n    col(\"col\").getItem(53).as(\"ActionGeo_CountryCode\")\n    )\n\nval mentions_map_DF = mentionsRDD.map(x => x.split(\"\\t\")).toDF()\nval mentions_DF = mentions_map_DF.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GLOBALEVENTID\").cast(\"Integer\"),\n    col(\"col\").getItem(2).as(\"MentionTimeDate\"),\n    col(\"col\").getItem(5).as(\"MentionIdentifier\"),\n    col(\"col\").getItem(14).as(\"MentionDocTranslationInfo\")\n    )\n\nval gkg_map_DF = gkgRDD.map(x => x.split(\"\\t\")).toDF()\nval gkg_DF = gkg_map_DF.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GKGRECORDID\"),\n    col(\"col\").getItem(4).as(\"DocumentIdentifier\"),\n    col(\"col\").getItem(7).as(\"Themes\"),\n    col(\"col\").getItem(8).as(\"V2Themes\"),\n    col(\"col\").getItem(23).as(\"AllNames\")\n    )\n\n// Dataframes translingual\nval events_map_DF_trans = eventsRDD_trans.map(x => x.split(\"\\t\")).toDF()\nval events_DF_trans = events_map_DF_trans.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GLOBALEVENTID\").cast(\"Integer\"),\n    col(\"col\").getItem(1).as(\"SQLDATE\").cast(\"Integer\"),\n    col(\"col\").getItem(33).as(\"NumArticles\").cast(\"Integer\"),\n    col(\"col\").getItem(53).as(\"ActionGeo_CountryCode\")\n    )\n\nval mentions_map_DF_trans = mentionsRDD_trans.map(x => x.split(\"\\t\")).toDF()\nval mentions_DF_trans = mentions_map_DF_trans.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GLOBALEVENTID\").cast(\"Integer\"),\n    col(\"col\").getItem(2).as(\"MentionTimeDate\"),\n    col(\"col\").getItem(5).as(\"MentionIdentifier\"),\n    col(\"col\").getItem(14).as(\"MentionDocTranslationInfo\")\n    )\n\nval gkg_map_DF_trans = gkgRDD_trans.map(x => x.split(\"\\t\")).toDF()\nval gkg_DF_trans = gkg_map_DF_trans.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GKGRECORDID\"),\n    col(\"col\").getItem(4).as(\"DocumentIdentifier\"),\n    col(\"col\").getItem(7).as(\"Themes\"),\n    col(\"col\").getItem(8).as(\"V2Themes\"),\n    col(\"col\").getItem(23).as(\"AllNames\")\n    )\n\n// Union english et Trans\nval events_DF_U = events_DF.union(events_DF_trans)\nval mentions_DF_U = mentions_DF.union(mentions_DF_trans)\nval gkg_DF_U = gkg_DF.union(gkg_DF_trans)\n\n// Join events and mentions\nval df_events_mentions = events_DF_U.join(mentions_DF_U,\"GLOBALEVENTID\")\n\n// Join df_events_mention and gkg_DF\nval df_events_mentions_gkg = df_events_mentions.join( gkg_DF_U,\n    df_events_mentions(\"MentionIdentifier\") <=> gkg_DF_U(\"DocumentIdentifier\"))\n\n//Création dataframe filtré sur les données COVID et CORONAVIRUS\nval df_COVID = df_events_mentions_gkg.where(\n    (upper($\"Themes\") like \"%CORONAVIRUS%\").or(\n        upper($\"Themes\") like \"%COVID%\").or(\n            upper($\"V2Themes\") like \"%CORONAVIRUS%\").or(\n                upper($\"V2Themes\") like \"%COVID%\").or(\n                     upper($\"AllNames\") like \"%CORONAVIRUS%\").or(\n                         upper($\"AllNames\") like \"%COVID%\")\n                         )","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"events_map_DF: org.apache.spark.sql.DataFrame = [value: array<string>]\nevents_DF: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, SQLDATE: int ... 2 more fields]\nmentions_map_DF: org.apache.spark.sql.DataFrame = [value: array<string>]\nmentions_DF: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, MentionTimeDate: string ... 2 more fields]\ngkg_map_DF: org.apache.spark.sql.DataFrame = [value: array<string>]\ngkg_DF: org.apache.spark.sql.DataFrame = [GKGRECORDID: string, DocumentIdentifier: string ... 3 more fields]\nevents_map_DF_trans: org.apache.spark.sql.DataFrame = [value: array<string>]\nevents_DF_trans: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, SQLDATE: int ... 2 more fields]\nmentions_map_DF_trans: org.apache.spark.sql.DataFrame = [value: array<string>]\nmentions_D..."}]},"apps":[],"jobName":"paragraph_1611324462620_-322036602","id":"20210117-182844_944090416","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3123"},{"text":"val df_Q1 = df_COVID\n    .withColumn(\"language\", when(col(\"MentionDocTranslationInfo\").isNull, \"eng\")\n        .otherwise(substring(col(\"MentionDocTranslationInfo\"), 7, 3)))\n    .withColumn(\"Date\", substring(col(\"MentionTimeDate\"), 1, 8))\n    .withColumnRenamed(\"ActionGeo_CountryCode\", \"EventCountry\")\n    .groupBy(\"Date\",\"language\",\"EventCountry\")\n    .agg(sum(\"NumArticles\") as \"Nb_Articles\")\n\n//df_Q1.show()\n    ","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df_Q1: org.apache.spark.sql.DataFrame = [Date: string, language: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1611324462621_-958017632","id":"20210117-182939_1062343352","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3124"},{"text":"%md\nChargement du df_Q1 en base","user":"anonymous","dateUpdated":"2021-01-22T14:32:58+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Chargement du df_Q1 en base</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1611325938613_-1397555762","id":"20210122-143218_796763106","dateCreated":"2021-01-22T14:32:18+0000","dateStarted":"2021-01-22T14:32:58+0000","dateFinished":"2021-01-22T14:32:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3125"},{"text":"// Write Df_Q1 into MongoDb\n\nval writeConfig = WriteConfig(Map(\"uri\" -> \"mongodb://root:root@54.87.38.106:27017\", \"database\" -> \"GDELT\", \"collection\" -> \"Q1-2020\")) \ndf_Q1.saveToMongoDB(writeConfig)","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"writeConfig: com.mongodb.spark.config.WriteConfig.Self = WriteConfig(GDELT,Q1-2020,Some(mongodb://root:root@54.87.38.106:27017),true,512,15,WriteConcernConfig(None,None,None,None),None)\n"}]},"apps":[],"jobName":"paragraph_1611324462621_-1563312379","id":"20210117-191029_1144093658","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3126"},{"text":"%md\n### Q2 : pour un pays donné en paramètre, affichez les évènements qui y ont eu place triées par le nombre de mentions  (tri décroissant); permettez une agrégation par jour/mois/année\n","user":"anonymous","dateUpdated":"2021-01-22T14:34:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Q2 : pour un pays donné en paramètre, affichez les évènements qui y ont eu place triées par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1611325656998_1765006826","id":"20210122-142736_1204669654","dateCreated":"2021-01-22T14:27:36+0000","dateStarted":"2021-01-22T14:34:34+0000","dateFinished":"2021-01-22T14:34:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3127"},{"text":"// Preparation données\n\n// Dataframes translingual\nval events_map_DF = eventsRDD.map(x => x.split(\"\\t\")).toDF()\nval events_DF = events_map_DF.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GLOBALEVENTID\").cast(\"Integer\"),\n    col(\"col\").getItem(1).as(\"SQLDATE\").cast(\"Integer\"),\n    col(\"col\").getItem(53).as(\"ActionGeo_CountryCode\")\n    )\n\nval mentions_map_DF = mentionsRDD.map(x => x.split(\"\\t\")).toDF()\nval mentions_DF = mentions_map_DF.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GLOBALEVENTID\").cast(\"Integer\"),\n    col(\"col\").getItem(5).as(\"MentionIdentifier\")\n    )\n\n// Dataframes translingual\nval events_map_DF_trans = eventsRDD_trans.map(x => x.split(\"\\t\")).toDF()\nval events_DF_trans = events_map_DF_trans.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GLOBALEVENTID\").cast(\"Integer\"),\n    col(\"col\").getItem(1).as(\"SQLDATE\").cast(\"Integer\"),\n    col(\"col\").getItem(53).as(\"ActionGeo_CountryCode\")\n    )\n\nval mentions_map_DF_trans = mentionsRDD_trans.map(x => x.split(\"\\t\")).toDF()\nval mentions_DF_trans = mentions_map_DF_trans.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GLOBALEVENTID\").cast(\"Integer\"),\n    col(\"col\").getItem(5).as(\"MentionIdentifier\")\n    )\n\n// Union english et Trans\nval events_DF_U = events_DF.union(events_DF_trans)\nval mentions_DF_U = mentions_DF.union(mentions_DF_trans)\n\n// Join events and mentions\nval df_events_mentions = events_DF_U.join(mentions_DF_U,\"GLOBALEVENTID\")","user":"anonymous","dateUpdated":"2021-01-22T14:15:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"events_map_DF: org.apache.spark.sql.DataFrame = [value: array<string>]\nevents_DF: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, SQLDATE: int ... 1 more field]\nmentions_map_DF: org.apache.spark.sql.DataFrame = [value: array<string>]\nmentions_DF: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, MentionIdentifier: string]\nevents_map_DF_trans: org.apache.spark.sql.DataFrame = [value: array<string>]\nevents_DF_trans: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, SQLDATE: int ... 1 more field]\nmentions_map_DF_trans: org.apache.spark.sql.DataFrame = [value: array<string>]\nmentions_DF_trans: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, MentionIdentifier: string]\nevents_DF_U: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GLOBALEVENTID: int, SQLDATE: int ...."}]},"apps":[],"jobName":"paragraph_1611324462622_-1736106814","id":"20210117-184318_144455895","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3128"},{"text":"val df_Q2 = df_events_mentions\n.withColumn(\"Date\",$\"SQLDATE\")\n.withColumn(\"Year\", substring($\"SQLDATE\",0,4))\n.withColumn(\"Month\", substring($\"SQLDATE\",5,2))\n.withColumn(\"Day\", substring($\"SQLDATE\",7,2))\n.withColumnRenamed(\"ActionGeo_CountryCode\", \"Country\")\n.groupBy(\"GLOBALEVENTID\",\"Country\",\"Date\",\"Year\",\"Month\",\"Day\").agg(countDistinct(col(\"MentionIdentifier\")).as(\"nb_mentions\"))\n\n//df_Q2.show()","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df_Q2: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, Country: string ... 5 more fields]\n"}]},"apps":[],"jobName":"paragraph_1611324462622_1150978375","id":"20210117-183717_773912200","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3129"},{"text":"%md\nChargement du df_Q2 en base","user":"anonymous","dateUpdated":"2021-01-22T14:35:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Chargement du df_Q2 en base</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1611326119695_1077556624","id":"20210122-143519_1837492551","dateCreated":"2021-01-22T14:35:19+0000","dateStarted":"2021-01-22T14:35:29+0000","dateFinished":"2021-01-22T14:35:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3130"},{"text":"// Write Df_Q2 into MongoDb\nval writeConfig_Q2 = WriteConfig(Map(\"uri\" -> \"mongodb://root:root@54.87.38.106:27017\", \"database\" -> \"GDELT\", \"collection\" -> \"Q2-2020\"))\n\ndf_Q2.saveToMongoDB(writeConfig_Q2)","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"writeConfig_Q2: com.mongodb.spark.config.WriteConfig.Self = WriteConfig(GDELT,Q2-2020,Some(mongodb://root:root@54.87.38.106:27017),true,512,15,WriteConcernConfig(None,None,None,None),None)\n"}]},"apps":[],"jobName":"paragraph_1611324462624_1881472490","id":"20210117-190452_1470554656","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3131"},{"text":"%md\n\n### Q3 :  pour une source de donnés passée en paramètre (gkg.SourceCommonName) affichez les thèmes, personnes, lieux  dont les articles de cette sources parlent ainsi que le le nombre d’articles et le ton moyen des articles (pour chaque thème/personne/lieu); permettez une agrégation par jour/mois/année.","user":"anonymous","dateUpdated":"2021-01-22T14:34:55+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Q3 : pour une source de donnés passée en paramètre (gkg.SourceCommonName) affichez les thèmes, personnes, lieux dont les articles de cette sources parlent ainsi que le le nombre d’articles et le ton moyen des articles (pour chaque thème/personne/lieu); permettez une agrégation par jour/mois/année.</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1611325686567_1114607566","id":"20210122-142806_1758292770","dateCreated":"2021-01-22T14:28:06+0000","dateStarted":"2021-01-22T14:34:55+0000","dateFinished":"2021-01-22T14:34:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3132"},{"text":"// Preparation données\n\nval gkg_map_DF = gkgRDD.map(x => x.split(\"\\t\")).toDF()\nval gkg_DF = gkg_map_DF.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GKGRECORDID\"),\n    col(\"col\").getItem(1).as(\"DATE\"),\n    col(\"col\").getItem(3).as(\"SourceCommonName\"),\n    col(\"col\").getItem(7).as(\"Themes\"),\n    col(\"col\").getItem(9).as(\"Location\"),\n    col(\"col\").getItem(11).as(\"Persons\"),\n    col(\"col\").getItem(15).as(\"V2Tone\")\n    )\n\nval gkg_map_DF_trans = gkgRDD_trans.map(x => x.split(\"\\t\")).toDF()\nval gkg_DF_trans = gkg_map_DF_trans.withColumn(\"col\", col(\"value\")).select(\n    col(\"col\").getItem(0).as(\"GKGRECORDID\"),\n    col(\"col\").getItem(1).as(\"DATE\"),\n    col(\"col\").getItem(3).as(\"SourceCommonName\"),\n    col(\"col\").getItem(7).as(\"Themes\"),\n    col(\"col\").getItem(9).as(\"Location\"),\n    col(\"col\").getItem(11).as(\"Persons\"),\n    col(\"col\").getItem(15).as(\"V2Tone\")\n    )\n\n// Union english et Trans\nval gkg_DF_U = gkg_DF.union(gkg_DF_trans)","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"gkg_map_DF: org.apache.spark.sql.DataFrame = [value: array<string>]\ngkg_DF: org.apache.spark.sql.DataFrame = [GKGRECORDID: string, DATE: string ... 5 more fields]\ngkg_map_DF_trans: org.apache.spark.sql.DataFrame = [value: array<string>]\ngkg_DF_trans: org.apache.spark.sql.DataFrame = [GKGRECORDID: string, DATE: string ... 5 more fields]\ngkg_DF_U: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GKGRECORDID: string, DATE: string ... 5 more fields]\n"}]},"apps":[],"jobName":"paragraph_1611324462625_-1658552660","id":"20210117-184146_1220835738","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3133"},{"text":"%md\nchargement du df_Q3 en base","user":"anonymous","dateUpdated":"2021-01-22T14:35:46+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>chargement du df_Q3 en base</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1611326132636_1449170374","id":"20210122-143532_839321921","dateCreated":"2021-01-22T14:35:32+0000","dateStarted":"2021-01-22T14:35:46+0000","dateFinished":"2021-01-22T14:35:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3134"},{"text":"val df_Q3 = gkg_DF_U.filter(!($\"SourceCommonName\" === \"\"))\n.withColumn(\"avg_tone\",substring_index($\"V2Tone\",\",\",1).cast(\"Double\"))\n.withColumn(\"YEAR\",substring(gkg_DF_U(\"DATE\"),0,4).cast(\"Int\"))\n.withColumn(\"MONTH\",substring(gkg_DF_U(\"DATE\"),3,2).cast(\"Int\"))\n.withColumn(\"DAY\",substring(gkg_DF_U(\"DATE\"),5,2).cast(\"Int\"))\n.withColumn(\"Persons_vect\",split(gkg_DF_U(\"Persons\"),\";\"))\n.withColumn(\"Location_vect\",split(gkg_DF_U(\"Location\"),\";\"))\n.withColumn(\"Themes_vect\",split(gkg_DF_U(\"themes\"),\";\"))\n.select(col(\"SourceCommonName\"),\ncol(\"GKGRECORDID\"),\ncol(\"Themes_vect\"),\ncol(\"Persons_vect\"),\ncol(\"YEAR\"),\ncol(\"MONTH\"),\ncol(\"DAY\"),\ncol(\"Location_vect\"),\ncol(\"avg_tone\"))\n\n\n//df_Q3.show()","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df_Q3: org.apache.spark.sql.DataFrame = [SourceCommonName: string, GKGRECORDID: string ... 7 more fields]\n"}]},"apps":[],"jobName":"paragraph_1611324462626_1170064750","id":"20210117-184143_1751342094","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3135"},{"text":"// Write Df_Q3 into MongoDb\nval writeConfig_Q3 = WriteConfig(Map(\"uri\" -> \"mongodb://root:root@54.87.38.106:27017\", \"database\" -> \"GDELT\", \"collection\" -> \"Q3-2020\"))\n\ndf_Q3.saveToMongoDB(writeConfig_Q3)","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"writeConfig_Q3: com.mongodb.spark.config.WriteConfig.Self = WriteConfig(GDELT,2020Q3,Some(mongodb://root:root@54.87.38.106:27017),true,512,15,WriteConcernConfig(None,None,None,None),None)\n"}]},"apps":[],"jobName":"paragraph_1611324462627_1941595486","id":"20210117-190453_1126541051","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3136"},{"text":"%md\n## Read Data from mongo","user":"anonymous","dateUpdated":"2021-01-22T14:29:04+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"results":{},"enabled":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Read Data from mongo</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1611324462627_809772542","id":"20210117-190533_792797690","dateCreated":"2021-01-22T14:07:42+0000","dateStarted":"2021-01-22T14:29:04+0000","dateFinished":"2021-01-22T14:29:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3137"},{"text":"// Read the Q1 table from mongoDB\n\nval readConfig = ReadConfig(Map(\"uri\" -> \"mongodb://root:root@54.87.38.106:27017\", \"database\" -> \"GDELT\", \"collection\" -> \"Q1-2020\"))\nval df_1 = spark.read.mongo(readConfig) \n \ndf_1.show()","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------+--------+--------------------+--------+-----------+\n|ActionGeo_CountryCode|    Date|                 _id|language|numArticles|\n+---------------------+--------+--------------------+--------+-----------+\n|                   CH|20200322|[6003465694ef7b34...|     fra|         52|\n|                   NC|20200322|[6003465694ef7b34...|     eng|          6|\n|                   JA|20200322|[6003465694ef7b34...|     eng|        756|\n|                   GV|20200322|[6003465694ef7b34...|     por|         40|\n|                   JA|20200322|[6003465694ef7b34...|     fra|         20|\n|                   EZ|20200322|[6003465694ef7b34...|     eng|         10|\n|                   IT|20200322|[6003465694ef7b34...|     pol|         20|\n|                   IR|20200322|[6003465694ef7b34...|     spa|        376|\n|                   JO|20200322|[6003465694ef7b34...|     deu|         20|\n|                   CE|20200322|[6003465694ef7b34...|     spa|         20|\n|                   SP|20200322|[6003465694ef7b34...|     eng|        452|\n|                   ML|20200322|[6003465694ef7b34...|     eng|         55|\n|                   SI|20200322|[6003465694ef7b34...|     spa|         20|\n|                   HR|20200322|[6003465694ef7b34...|     hrv|         40|\n|                   IZ|20200322|[6003465694ef7b34...|     eng|         25|\n|                   US|20200322|[6003465694ef7b34...|     bul|         20|\n|                   CI|20200322|[6003465694ef7b34...|     spa|         20|\n|                   IZ|20200322|[6003465694ef7b34...|     deu|         20|\n|                   GR|20200322|[6003465694ef7b34...|     eng|       1520|\n|                   GJ|20200322|[6003465694ef7b34...|     eng|         10|\n+---------------------+--------+--------------------+--------+-----------+\nonly showing top 20 rows\n\nreadConfig: com.mongodb.spark.config.ReadConfig.Self = ReadConfig(enron,Q1,Some(mongodb://root:root@54.87.38.106:27017),1000,DefaultMongoPartitioner,Map(),15,ReadPreferenceConfig(primary,None),ReadConcernConfig(None),false)\ndf_1: org.apache.spark.sql.DataFrame = [ActionGeo_CountryCode: string, Date: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1611324462628_-534709403","id":"20210117-190534_1782317290","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3138"},{"text":"// Read the Q2 table from mongoDB\n\nval readConfig = ReadConfig(Map(\"uri\" -> \"mongodb://root:root@54.87.38.106:27017\", \"database\" -> \"GDELT\", \"collection\" -> \"Q2-2020\"))\nval df_2 = spark.read.mongo(readConfig) \n \ndf_2.show()","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+--------+---+-------------+-----+----+--------------------+-----------+\n|Country|    Date|Day|GLOBALEVENTID|Month|Year|                 _id|nb_mentions|\n+-------+--------+---+-------------+-----+----+--------------------+-----------+\n|     PK|20200322| 22|    913861440|   03|2020|[6003580594ef7b5e...|          5|\n|     GM|20200322| 22|    913862385|   03|2020|[6003580594ef7b5e...|          1|\n|     IT|20200322| 22|    913862166|   03|2020|[6003580594ef7b5e...|          4|\n|     PK|20200322| 22|    913861127|   03|2020|[6003580594ef7b5e...|          1|\n|     US|20200322| 22|    913858878|   03|2020|[6003580594ef7b5e...|          1|\n|     US|20200322| 22|    913861735|   03|2020|[6003580594ef7b5e...|          2|\n|     QA|20200322| 22|    913859233|   03|2020|[6003580594ef7b5e...|          4|\n|     FR|20200322| 22|    913864739|   03|2020|[6003580594ef7b5e...|          2|\n|     SP|20200322| 22|    913864545|   03|2020|[6003580594ef7b5e...|          2|\n|     US|20200322| 22|    913862266|   03|2020|[6003580594ef7b5e...|          1|\n|     PK|20200322| 22|    913862881|   03|2020|[6003580594ef7b5e...|          1|\n|     HR|20200322| 22|    913860703|   03|2020|[6003580594ef7b5e...|          2|\n|     IS|20200322| 22|    913860451|   03|2020|[6003580594ef7b5e...|          2|\n|     PL|20200322| 22|    913860446|   03|2020|[6003580594ef7b5e...|          2|\n|     AS|20200322| 22|    913861276|   03|2020|[6003580594ef7b5e...|          2|\n|     SZ|20200322| 22|    913858846|   03|2020|[6003580594ef7b5e...|          1|\n|     BG|20200322| 22|    913863362|   03|2020|[6003580594ef7b5e...|          2|\n|     IT|20200322| 22|    913864392|   03|2020|[6003580594ef7b5e...|          2|\n|     UK|20200322| 22|    913862350|   03|2020|[6003580594ef7b5e...|          1|\n|     SF|20200322| 22|    913862354|   03|2020|[6003580594ef7b5e...|          1|\n+-------+--------+---+-------------+-----+----+--------------------+-----------+\nonly showing top 20 rows\n\nreadConfig: com.mongodb.spark.config.ReadConfig.Self = ReadConfig(enron,Q2,Some(mongodb://root:root@54.87.38.106:27017),1000,DefaultMongoPartitioner,Map(),15,ReadPreferenceConfig(primary,None),ReadConcernConfig(None),false)\ndf_2: org.apache.spark.sql.DataFrame = [Country: string, Date: string ... 6 more fields]\n"}]},"apps":[],"jobName":"paragraph_1611324462630_-1780819964","id":"20210117-192926_1638865957","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3139"},{"text":"// Read the Q3 table from mongoDB\n\nval readConfig = ReadConfig(Map(\"uri\" -> \"mongodb://root:root@54.87.38.106:27017\", \"database\" -> \"GDLET\", \"collection\" -> \"Q3-2020\"))\nval df_3 = spark.read.mongo(readConfig) \n \ndf_3.show()","user":"anonymous","dateUpdated":"2021-01-22T14:07:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+------------------+--------------------+-----+--------------------+-------------------+--------------------+----+--------------------+------------------+\n|DAY|       GKGRECORDID|       Location_vect|MONTH|        Persons_vect|   SourceCommonName|         Themes_vect|YEAR|                 _id|          avg_tone|\n+---+------------------+--------------------+-----+--------------------+-------------------+--------------------+----+--------------------+------------------+\n|  3| 20200322083000-T0|[1#Germany#GM#GM#...|   20|                  []|           senat.cz|[USPEC_POLITICS_G...|2020|[60035d7b94ef7b6d...|  1.49253731343284|\n|  3| 20200322083000-T1|[1#Cuba#CU#CU#22#...|   20|                  []|           senat.cz|[USPEC_POLITICS_G...|2020|[60035d7b94ef7b6d...|   1.8796992481203|\n|  3| 20200322083000-T2|[1#Honduras#HO#HO...|   20|[juan carlos zeva...|      halonoviny.cz|[KILL, CRISISLEX_...|2020|[60035d7b94ef7b6d...| -4.84496124031008|\n|  3| 20200322083000-T3|[1#China#CH#CH#35...|   20|                  []|      halonoviny.cz|[TAX_ETHNICITY, T...|2020|[60035d7b94ef7b6d...|  1.12201963534362|\n|  3| 20200322083000-T4|                  []|   20|                  []|            zive.cz|[WB_286_TELECOMMU...|2020|[60035d7b94ef7b6d...|-0.662251655629139|\n|  3| 20200322083000-T5|[1#Germany#GM#GM#...|   20|                  []|olomouckenovinky.cz|[ECON_SUBSIDIES, ...|2020|[60035d7b94ef7b6d...| -1.59857904085258|\n|  3| 20200322083000-T6|                  []|   20|                  []|olomouckenovinky.cz|[TAX_FNCACT, TAX_...|2020|[60035d7b94ef7b6d...| -3.94736842105263|\n|  3| 20200322083000-T7|[1#China#CH#CH#35...|   20|[hans wlfgand mic...|olomouckenovinky.cz|[TAX_DISEASE, TAX...|2020|[60035d7b94ef7b6d...| -3.04621848739496|\n|  3| 20200322083000-T8|[1#Germany#GM#GM#...|   20|     [angela merkel]|olomouckenovinky.cz|[GENERAL_GOVERNME...|2020|[60035d7b94ef7b6d...| -3.28185328185328|\n|  3| 20200322083000-T9|[4#Miroslav, Stre...|   20|                  []|      eurozpravy.cz|[TAX_ECON_PRICE, ...|2020|[60035d7b94ef7b6d...|               0.0|\n|  3|20200322083000-T10|[1#Croatia#HR#HR#...|   20|                  []|           senat.cz|[LEADER, TAX_FNCA...|2020|[60035d7b94ef7b6d...|  2.63157894736842|\n|  3|20200322083000-T11|                  []|   20|                  []|           tyden.cz|[TAX_FNCACT, TAX_...|2020|[60035d7b94ef7b6d...|           -1.5625|\n|  3|20200322083000-T12|[1#Croatia#HR#HR#...|   20|                  []|           senat.cz|[LEADER, TAX_FNCA...|2020|[60035d7b94ef7b6d...|  2.60869565217391|\n|  3|20200322083000-T13|                  []|   20|                  []|           senat.cz|[USPEC_POLITICS_G...|2020|[60035d7b94ef7b6d...| -2.63157894736842|\n|  3|20200322083000-T14|[1#Czech Republic...|   20|                  []|           senat.cz|[ELECTION, USPEC_...|2020|[60035d7b94ef7b6d...|  4.76190476190476|\n|  3|20200322083000-T15|[1#Germany#GM#GM#...|   20|    [zbynek linhart]|           senat.cz|[USPEC_POLICY1, E...|2020|[60035d7b94ef7b6d...|  5.73770491803279|\n|  3|20200322083000-T16|[1#Portugal#PO#PO...|   20|[george drahos ds...|           senat.cz|[EPU_ECONOMY, EPU...|2020|[60035d7b94ef7b6d...|  3.80952380952381|\n|  3|20200322083000-T17|[1#Czech Republic...|   20|       [paul fisher]|           senat.cz|[TAX_FNCACT, TAX_...|2020|[60035d7b94ef7b6d...|  7.04225352112676|\n|  3|20200322083000-T18|[1#Czech Republic...|   20|                  []|           senat.cz|[ELECTION, USPEC_...|2020|[60035d7b94ef7b6d...|  4.76190476190476|\n|  3|20200322083000-T19|[4#Miroslav, Stre...|   20|                  []|           senat.cz|[RURAL, TAX_WORLD...|2020|[60035d7b94ef7b6d...|  2.68456375838926|\n+---+------------------+--------------------+-----+--------------------+-------------------+--------------------+----+--------------------+------------------+\nonly showing top 20 rows\n\nreadConfig: com.mongodb.spark.config.ReadConfig.Self = ReadConfig(enron,Q3,Some(mongodb://root:root@54.87.38.106:27017),1000,DefaultMongoPartitioner,Map(),15,ReadPreferenceConfig(primary,None),ReadConcernConfig(None),false)\ndf_3: org.apache.spark.sql.DataFrame = [DAY: int, GKGRECORDID: string ... 8 more fields]\n"}]},"apps":[],"jobName":"paragraph_1611324462631_361864446","id":"20210117-193010_1423370402","dateCreated":"2021-01-22T14:07:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3140"}],"name":"2. Exploration Gdelt 2021","id":"2FY9YR43K","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}